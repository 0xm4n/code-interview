function heapSort(arr) {
  var length = arr.length;

  // Build heap
  for (let i = Math.floor((length - 1) / 2); i >= 0; i--) {
    heapify(arr, length, i);
  }

  // One by one extract an element from heap
  for (let i = length - 1; i > 0; i--) {
    [arr[0], arr[i]] = [arr[i], arr[0]];

    // Call max heapify on the reduced heap
    heapify(arr, i, 0);
  }
}

// To heapify a subtree rooted with node i which is
// an index in arr. length is size of heap
function heapify(arr, length, index) {
  var largest = index;
  var left = 2 * index + 1;
  var right = 2 * index + 2;

  // If left child is larger than root
  if (left < length && arr[left] > arr[largest]) {
    largest = left;
  }

  // If right child is larger than largest so far
  if (right < length && arr[right] > arr[largest]) largest = right;

  // If largest is not root
  if (largest != index) {
    [arr[index], arr[largest]] = [arr[largest], arr[index]];

    // Recursively heapify the affected sub-tree
    heapify(arr, length, largest);
  }
}

var a = [9, 10, 2, 1, 5, 4, 3, 6, 8, 7, 13];

heapSort(a);
